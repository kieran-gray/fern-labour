[project]
name = "labour-service"
version = "0.1.0"
description = ""
readme = "README.md"
authors = [
    {name = "Kieran Gray", email = "gray.kieran@protonmail.com"},
]
requires-python = "<3.13,>=3.12"

[dependency-groups]
app = [
    "dishka<2.0.0,>=1.4.0",
    "orjson<4.0.0,>=3.10.7",
    "fern-labour-notifications-shared>=0.1.0",
    "gcp-pub-sub-dishka>=0.1.1",
    "pydantic[email]<3.0.0,>=2.9.0",
    "python-keycloak>=5.1.1",
    "python-multipart>=0.0.20",
    "rtoml<1.0.0,>=0.11.0",
    "stripe>=11.6.0",
]
db = [
    "sqlalchemy[mypy]==2.0.36",
    "sqlalchemy-utils>=0.41.2",
    "psycopg[binary]<4.0.0,>=3.2.3",
    "cryptography>=44.0.2",
]
http = [
    "sentry-sdk[fastapi]>=2.22.0",
    "fastapi<1.0.0,>=0.115.0",
    "uvicorn<1.0.0,>=0.32.0",
    "uvloop<1.0.0,>=0.21.0",
    "redis[hiredis]>=6.0.0",
]
migrations = [
    "alembic<2.0.0,>=1.13.2",
    "alembic-postgresql-enum<2.0.0,>=1.3.0",
]
dev = [
    "bandit<2.0.0,>=1.7.9",
    "debugpy>=1.8.9",
    "fakeredis>=2.28.1",
    "mypy<2.0.0,>=1.11.2",
    "ruff<1.0.0,>=0.6.3",
    "pytest-cov>=6.0.0",
    "pytest<9.0.0,>=8.3.2",
    "pytest-asyncio<1.0.0,>=0.24.0",
]

[tool.uv]
default-groups = ["db"]

[tool.uv.sources]
gcp-pub-sub-dishka = { index = "fern-labour-packages" }
fern-labour-notifications-shared = { index = "fern-labour-packages" }

[[tool.uv.index]]
name = "fern-labour-packages"
url = "https://europe-west2-python.pkg.dev/valued-vault-446719-t7/fern-labour-packages/simple"
publish-url = "https://europe-west2-python.pkg.dev/valued-vault-446719-t7/fern-labour-packages/"
explicit = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/app"]

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']

[tool.bandit]
skips = ["B101"]

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "B024",  # allow abstract base classes with no abstract methods or properties
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"app/infrastructure/persistence/alembic/*.py" = ["F401"] # Unused imports

[tool.pytest.ini_options]
pythonpath = [
    "src",
]
testpaths = [
    "tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
disable_warnings = ["no-data-collected"]
source = ["src"]

[tool.coverage.report]
omit = [
    "**/__init__.py",
    "**/alembic/*",
    "**/infrastructure/persistence/*",
    "src/setup/ioc/*",
    "src/setup/app_factory.py",
    "src/run.py",
    "src/run_consumer.py"
]
show_missing = true
