"""initial notification tables

Revision ID: 39b6ef13aecf
Revises:
Create Date: 2025-03-24 10:10:13.547732

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import func

# revision identifiers, used by Alembic.
revision: str = "39b6ef13aecf"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("EMAIL", "SMS", name="notification_type").create(op.get_bind(), checkfirst=True)
    sa.Enum("CREATED", "SENT", "FAILURE", "SUCCESS", name="notification_status").create(
        op.get_bind()
    )
    op.create_table(
        "notifications",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "CREATED",
                "SENT",
                "FAILURE",
                "SUCCESS",
                name="notification_status",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "type",
            postgresql.ENUM("EMAIL", "SMS", name="notification_type", create_type=False),
            nullable=False,
        ),
        sa.Column("destination", sa.String(), nullable=False),
        sa.Column("template", sa.String(), nullable=False),
        sa.Column("data", sa.String(), nullable=False),
        sa.Column("metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("external_id", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.TIMESTAMP(timezone=True), server_default=func.now(), nullable=False
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=func.now(),
            onupdate=func.now(),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_notifications")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("notifications")
    sa.Enum("CREATED", "SENT", "FAILURE", "SUCCESS", name="notification_status").drop(op.get_bind())
    sa.Enum("EMAIL", "SMS", name="notification_type").drop(op.get_bind())
    # ### end Alembic commands ###
