services:

  labour-service:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${DOCKER_IMAGE_LABOUR_SERVICE?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      labour-service-pre-start:
        condition: service_completed_successfully
        restart: false
    env_file:
      - ./labour_service/.env
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 5
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: "credentials.json"
    volumes:
      - /home/kieran/.config/gcloud/application_default_credentials.json:/app/credentials.json:ro
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=8000
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect

  labour-service-pre-start:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${DOCKER_IMAGE_LABOUR_SERVICE?Variable not set}-alembic:${TAG-latest}'
    restart: "no"
    env_file:
      - ./labour_service/.env

  notification-service:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${DOCKER_IMAGE_NOTIFICATION_SERVICE?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      notification-service-pre-start:
        condition: service_completed_successfully
        restart: false
    env_file:
      - ./notification_service/.env
    ports:
      - "8001:8001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/api/v1/health" ]
      interval: 30s
      timeout: 5s
      retries: 5
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: "credentials.json"
    volumes:
      - /home/kieran/.config/gcloud/application_default_credentials.json:/app/credentials.json:ro
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-notifications.loadbalancer.server.port=8001
      - traefik.http.routers.${STACK_NAME?Variable not set}-notifications-http.rule=Host(`notifications.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-notifications-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-notifications-https.rule=Host(`notifications.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-notifications-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-notifications-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-notifications-https.tls.certresolver=le
      - traefik.http.routers.${STACK_NAME?Variable not set}-notifications-http.middlewares=https-redirect

  notification-service-pre-start:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${DOCKER_IMAGE_NOTIFICATION_SERVICE?Variable not set}-alembic:${TAG-latest}'
    restart: "no"
    env_file:
      - ./notification_service/.env

  labour-consumer:
    image: '${DOCKER_IMAGE_REPOSITORY}/${DOCKER_IMAGE_LABOUR_SERVICE?Variable not set}:${TAG-latest}'
    restart: always
    env_file:
      - ./labour_service/.env
    command: [ "python", "-m", "app.run_consumer" ]
    networks:
      - default
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: "credentials.json"
    volumes:
      - /home/kieran/.config/gcloud/application_default_credentials.json:/app/credentials.json:ro

  notifications-consumer:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${DOCKER_IMAGE_NOTIFICATION_SERVICE?Variable not set}:${TAG-latest}'
    restart: always
    env_file:
      - ./notification_service/.env
    command: [ "python", "-m", "app.run_consumer" ]
    networks:
      - default
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: "credentials.json"
    volumes:
      - /home/kieran/.config/gcloud/application_default_credentials.json:/app/credentials.json:ro

  keycloak:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${STACK_NAME?Variable not set}-keycloak:${TAG-latest}'
    command: start
    environment:
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: ${POSTGRES_HOST}
      KC_DB_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_PROXY_HEADERS: xforwarded
      KC_HOSTNAME_STRICT: false
    restart: always
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      # Keycloak application routes
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-http.rule=Host(`auth.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-https.rule=Host(`auth.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-keycloak-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-keycloak.loadbalancer.server.port=8080
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import:ro

  frontend:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`track.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`track.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le

      # Enable redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect

  marketing:
    image: '${DOCKER_IMAGE_REPOSITORY?Variable not set}/${DOCKER_IMAGE_MARKETING?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-marketing.loadbalancer.server.port=81

      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing-https.tls.certresolver=le

      # Enable redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing-http.middlewares=https-redirect
      - traefik.http.middlewares.mywwwremove.redirectregex.regex=^https://www\.(.*)
      - traefik.http.middlewares.mywwwremove.redirectregex.replacement=https://$${1}
      - traefik.http.routers.${STACK_NAME?Variable not set}-marketing.middlewares=mywwwremove

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
