// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  BeginLabourApiV1LabourBeginPostResponse,
  BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutData,
  BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutResponse,
  CompleteLabourApiV1LabourCompletePutData,
  CompleteLabourApiV1LabourCompletePutResponse,
  ContactUsSendMessageApiV1ContactUsPostData,
  ContactUsSendMessageApiV1ContactUsPostResponse,
  EndContractionApiV1LabourContractionEndPutData,
  EndContractionApiV1LabourContractionEndPutResponse,
  GetActiveLabourApiV1LabourActiveGetResponse,
  GetActiveLabourSummaryApiV1LabourActiveSummaryGetResponse,
  GetApiV1SubscriberGetResponse,
  GetBirthingPersonApiV1BirthingPersonGetResponse,
  GetBirthingPersonSummaryApiV1BirthingPersonSummaryGetResponse,
  GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetData,
  GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetResponse,
  GetOrCreateApiV1BirthingPersonGetOrCreateGetResponse,
  GetSubscriptionsApiV1SubscriptionSubscriptionsGetResponse,
  GetSubscriptionTokenApiV1LabourSubscriptionTokenGetResponse,
  GetUserApiV1AuthUserGetResponse,
  HealthcheckApiV1HealthGetResponse,
  LoginApiV1AuthLoginPostData,
  LoginApiV1AuthLoginPostResponse,
  PlanLabourApiV1LabourPlanPostData,
  PlanLabourApiV1LabourPlanPostResponse,
  PostLabourUpdateApiV1LabourLabourUpdatePostData,
  PostLabourUpdateApiV1LabourLabourUpdatePostResponse,
  RedirectToDocsGetResponse,
  RegisterApiV1BirthingPersonRegisterPostResponse,
  RegisterApiV1SubscriberRegisterPostResponse,
  RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutData,
  RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutResponse,
  SendInviteApiV1LabourSendInvitePostData,
  SendInviteApiV1LabourSendInvitePostResponse,
  StartContractionApiV1LabourContractionStartPostData,
  StartContractionApiV1LabourContractionStartPostResponse,
  SubscribeToApiV1SubscriptionSubscribeLabourIdPostData,
  SubscribeToApiV1SubscriptionSubscribeLabourIdPostResponse,
  UnsubscribeFromApiV1SubscriptionUnsubscribePostData,
  UnsubscribeFromApiV1SubscriptionUnsubscribePostResponse,
  UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutData,
  UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutResponse,
  UpdateLabourPlanApiV1LabourPlanPutData,
  UpdateLabourPlanApiV1LabourPlanPutResponse,
  UpdateRoleApiV1SubscriptionManagementUpdateRolePutData,
  UpdateRoleApiV1SubscriptionManagementUpdateRolePutResponse,
} from './types.gen';

export class AuthService {
  /**
   * Login
   * Login endpoint to authenticate the user and return an access token.
   *
   * Args:
   * username (str): The username of the user attempting to log in.
   * password (str): The password of the user.
   *
   * Returns:
   * TokenResponse: Contains the access token upon successful authentication.
   * @param data The data for the request.
   * @param data.formData
   * @returns TokenResponse Successful Response
   * @throws ApiError
   */
  public static loginApiV1AuthLoginPost(
    data: LoginApiV1AuthLoginPostData
  ): CancelablePromise<LoginApiV1AuthLoginPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/auth/login',
      formData: data.formData,
      mediaType: 'application/x-www-form-urlencoded',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * Get currently logged in user. Requires a valid token for access.
   *
   * Args:
   * credentials (HTTPAuthorizationCredentials): Bearer token provided via HTTP Authorization header.
   *
   * Returns:
   * User: Information about the authenticated user.
   * @returns User Successful Response
   * @throws ApiError
   */
  public static getUserApiV1AuthUserGet(): CancelablePromise<GetUserApiV1AuthUserGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/auth/user',
    });
  }
}

export class BirthingPersonService {
  /**
   * Register
   * @returns BirthingPersonResponse Successful Response
   * @throws ApiError
   */
  public static registerApiV1BirthingPersonRegisterPost(): CancelablePromise<RegisterApiV1BirthingPersonRegisterPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/birthing-person/register',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Birthing Person
   * @returns BirthingPersonResponse Successful Response
   * @throws ApiError
   */
  public static getBirthingPersonApiV1BirthingPersonGet(): CancelablePromise<GetBirthingPersonApiV1BirthingPersonGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/birthing-person/',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Or Create
   * @returns BirthingPersonResponse Successful Response
   * @throws ApiError
   */
  public static getOrCreateApiV1BirthingPersonGetOrCreateGet(): CancelablePromise<GetOrCreateApiV1BirthingPersonGetOrCreateGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/birthing-person/get-or-create',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Birthing Person Summary
   * @returns BirthingPersonSummaryResponse Successful Response
   * @throws ApiError
   */
  public static getBirthingPersonSummaryApiV1BirthingPersonSummaryGet(): CancelablePromise<GetBirthingPersonSummaryApiV1BirthingPersonSummaryGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/birthing-person/summary',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }
}

export class ContactUsService {
  /**
   * Contact Us Send Message
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static sendMessageApiV1ContactUsPost(
    data: ContactUsSendMessageApiV1ContactUsPostData
  ): CancelablePromise<ContactUsSendMessageApiV1ContactUsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/contact-us/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Validation Error',
        429: 'Too Many Requests',
        500: 'Internal Server Error',
      },
    });
  }
}

export class GeneralService {
  /**
   * Redirect To Docs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static redirectToDocsGet(): CancelablePromise<RedirectToDocsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/',
    });
  }
}

export class HealthService {
  /**
   * Healthcheck
   * @returns string Successful Response
   * @throws ApiError
   */
  public static checkApiV1HealthGet(): CancelablePromise<HealthcheckApiV1HealthGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/health',
    });
  }
}

export class LabourService {
  /**
   * Update Labour Plan
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static updateLabourPlanApiV1LabourPlanPut(
    data: UpdateLabourPlanApiV1LabourPlanPutData
  ): CancelablePromise<UpdateLabourPlanApiV1LabourPlanPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/labour/plan',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Plan Labour
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static planLabourApiV1LabourPlanPost(
    data: PlanLabourApiV1LabourPlanPostData
  ): CancelablePromise<PlanLabourApiV1LabourPlanPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/plan',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Begin Labour
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static beginLabourApiV1LabourBeginPost(): CancelablePromise<BeginLabourApiV1LabourBeginPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/begin',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Start Contraction
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static startContractionApiV1LabourContractionStartPost(
    data: StartContractionApiV1LabourContractionStartPostData
  ): CancelablePromise<StartContractionApiV1LabourContractionStartPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/contraction/start',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * End Contraction
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static endContractionApiV1LabourContractionEndPut(
    data: EndContractionApiV1LabourContractionEndPutData
  ): CancelablePromise<EndContractionApiV1LabourContractionEndPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/labour/contraction/end',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Complete Labour
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static completeLabourApiV1LabourCompletePut(
    data: CompleteLabourApiV1LabourCompletePutData
  ): CancelablePromise<CompleteLabourApiV1LabourCompletePutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/labour/complete',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Active Labour
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static getActiveLabourApiV1LabourActiveGet(): CancelablePromise<GetActiveLabourApiV1LabourActiveGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/active',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Active Labour Summary
   * @returns LabourSummaryResponse Successful Response
   * @throws ApiError
   */
  public static getActiveLabourSummaryApiV1LabourActiveSummaryGet(): CancelablePromise<GetActiveLabourSummaryApiV1LabourActiveSummaryGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/active/summary',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Post Labour Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static postLabourUpdateApiV1LabourLabourUpdatePost(
    data: PostLabourUpdateApiV1LabourLabourUpdatePostData
  ): CancelablePromise<PostLabourUpdateApiV1LabourLabourUpdatePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/labour-update',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Subscription Token
   * @returns LabourSubscriptionTokenResponse Successful Response
   * @throws ApiError
   */
  public static getSubscriptionTokenApiV1LabourSubscriptionTokenGet(): CancelablePromise<GetSubscriptionTokenApiV1LabourSubscriptionTokenGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/subscription-token',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Send Invite
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static sendInviteApiV1LabourSendInvitePost(
    data: SendInviteApiV1LabourSendInvitePostData
  ): CancelablePromise<SendInviteApiV1LabourSendInvitePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/send_invite',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class SubscriberService {
  /**
   * Get
   * @returns SubscriberResponse Successful Response
   * @throws ApiError
   */
  public static getApiV1SubscriberGet(): CancelablePromise<GetApiV1SubscriberGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/subscriber/',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Register
   * @returns SubscriberResponse Successful Response
   * @throws ApiError
   */
  public static registerApiV1SubscriberRegisterPost(): CancelablePromise<RegisterApiV1SubscriberRegisterPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/subscriber/register',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }
}

export class SubscriptionService {
  /**
   * Subscribe To
   * @param data The data for the request.
   * @param data.labourId
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static subscribeToApiV1SubscriptionSubscribeLabourIdPost(
    data: SubscribeToApiV1SubscriptionSubscribeLabourIdPostData
  ): CancelablePromise<SubscribeToApiV1SubscriptionSubscribeLabourIdPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/subscription/subscribe/{labour_id}',
      path: {
        labour_id: data.labourId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Unsubscribe From
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static unsubscribeFromApiV1SubscriptionUnsubscribePost(
    data: UnsubscribeFromApiV1SubscriptionUnsubscribePostData
  ): CancelablePromise<UnsubscribeFromApiV1SubscriptionUnsubscribePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/subscription/unsubscribe',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Subscriptions
   * @returns SubscriptionsResponse Successful Response
   * @throws ApiError
   */
  public static getSubscriptionsApiV1SubscriptionSubscriptionsGet(): CancelablePromise<GetSubscriptionsApiV1SubscriptionSubscriptionsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/subscription/subscriptions',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Labour Subscriptions
   * @param data The data for the request.
   * @param data.labourId
   * @returns LabourSubscriptionsResponse Successful Response
   * @throws ApiError
   */
  public static getLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGet(
    data: GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetData
  ): CancelablePromise<GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/subscription/labour_subscriptions/{labour_id}',
      path: {
        labour_id: data.labourId,
      },
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class SubscriptionManagementService {
  /**
   * Remove Subscriber
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static removeSubscriberApiV1SubscriptionManagementRemoveSubscriberPut(
    data: RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutData
  ): CancelablePromise<RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/remove-subscriber',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Block Subscriber
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static blockSubscriberApiV1SubscriptionManagementBlockSubscriberPut(
    data: BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutData
  ): CancelablePromise<BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/block-subscriber',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Update Role
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static updateRoleApiV1SubscriptionManagementUpdateRolePut(
    data: UpdateRoleApiV1SubscriptionManagementUpdateRolePutData
  ): CancelablePromise<UpdateRoleApiV1SubscriptionManagementUpdateRolePutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/update-role',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Update Contact Methods
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static updateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPut(
    data: UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutData
  ): CancelablePromise<UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/update-contact-methods',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}
