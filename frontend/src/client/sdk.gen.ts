// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  ApproveSubscriberApiV1SubscriptionManagementApproveSubscriberPutData,
  ApproveSubscriberApiV1SubscriptionManagementApproveSubscriberPutResponse,
  BeginLabourApiV1LabourBeginPostResponse,
  BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutData,
  BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutResponse,
  CompleteLabourApiV1LabourCompletePutData,
  CompleteLabourApiV1LabourCompletePutResponse,
  ContactUsSendMessageApiV1ContactUsPostData,
  ContactUsSendMessageApiV1ContactUsPostResponse,
  CreateCheckoutSessionApiV1PaymentsCreateCheckoutSessionPostData,
  CreateCheckoutSessionApiV1PaymentsCreateCheckoutSessionPostResponse,
  DeleteContractionApiV1LabourContractionDeleteDeleteData,
  DeleteContractionApiV1LabourContractionDeleteDeleteResponse,
  DeleteLabourApiV1LabourDeleteLabourIdDeleteData,
  DeleteLabourApiV1LabourDeleteLabourIdDeleteResponse,
  DeleteLabourUpdateApiV1LabourLabourUpdateDeleteData,
  DeleteLabourUpdateApiV1LabourLabourUpdateDeleteResponse,
  DocsDocsGetResponse,
  EndContractionApiV1LabourContractionEndPutData,
  EndContractionApiV1LabourContractionEndPutResponse,
  GetActiveLabourApiV1LabourActiveGetResponse,
  GetActiveLabourSummaryApiV1LabourActiveSummaryGetResponse,
  GetAllLaboursApiV1LabourGetAllGetResponse,
  GetLabourByIdApiV1LabourGetLabourIdGetData,
  GetLabourByIdApiV1LabourGetLabourIdGetResponse,
  GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetData,
  GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetResponse,
  GetSubscriberSubscriptionsApiV1SubscriptionSubscriberSubscriptionsGetResponse,
  GetSubscriptionByIdApiV1SubscriptionSubscriptionDataSubscriptionIdGetData,
  GetSubscriptionByIdApiV1SubscriptionSubscriptionDataSubscriptionIdGetResponse,
  GetSubscriptionsApiV1SubscriptionSubscriptionsGetResponse,
  GetSubscriptionTokenApiV1LabourSubscriptionTokenGetResponse,
  GetUserApiV1AuthUserGetResponse,
  GetUserApiV1UserGetResponse,
  GetUserSummaryApiV1UserSummaryGetResponse,
  HealthcheckApiV1HealthGetResponse,
  LoginApiV1AuthLoginPostData,
  LoginApiV1AuthLoginPostResponse,
  OpenapiOpenapiJsonGetResponse,
  PlanLabourApiV1LabourPlanPostData,
  PlanLabourApiV1LabourPlanPostResponse,
  PostLabourUpdateApiV1LabourLabourUpdatePostData,
  PostLabourUpdateApiV1LabourLabourUpdatePostResponse,
  RedirectToDocsGetResponse,
  RedocRedocGetResponse,
  RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutData,
  RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutResponse,
  SendInviteApiV1LabourSendInvitePostData,
  SendInviteApiV1LabourSendInvitePostResponse,
  SendInviteApiV1SubscriberSendInvitePostData,
  SendInviteApiV1SubscriberSendInvitePostResponse,
  StartContractionApiV1LabourContractionStartPostData,
  StartContractionApiV1LabourContractionStartPostResponse,
  StripeWebhookApiV1PaymentsWebhookPostResponse,
  SubscribeToApiV1SubscriptionSubscribeLabourIdPostData,
  SubscribeToApiV1SubscriptionSubscribeLabourIdPostResponse,
  UnblockSubscriberApiV1SubscriptionManagementUnblockSubscriberPutData,
  UnblockSubscriberApiV1SubscriptionManagementUnblockSubscriberPutResponse,
  UnsubscribeFromApiV1SubscriptionUnsubscribePostData,
  UnsubscribeFromApiV1SubscriptionUnsubscribePostResponse,
  UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutData,
  UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutResponse,
  UpdateContractionApiV1LabourContractionUpdatePutData,
  UpdateContractionApiV1LabourContractionUpdatePutResponse,
  UpdateLabourPlanApiV1LabourPlanPutData,
  UpdateLabourPlanApiV1LabourPlanPutResponse,
  UpdateRoleApiV1SubscriptionManagementUpdateRolePutData,
  UpdateRoleApiV1SubscriptionManagementUpdateRolePutResponse,
} from './types.gen';

export class AuthService {
  /**
   * Login
   * Login endpoint to authenticate the user and return an access token.
   *
   * Args:
   * username (str): The username of the user attempting to log in.
   * password (str): The password of the user.
   *
   * Returns:
   * TokenResponse: Contains the access token upon successful authentication.
   * @param data The data for the request.
   * @param data.formData
   * @returns TokenResponse Successful Response
   * @throws ApiError
   */
  public static login(
    data: LoginApiV1AuthLoginPostData
  ): CancelablePromise<LoginApiV1AuthLoginPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/auth/login',
      formData: data.formData,
      mediaType: 'application/x-www-form-urlencoded',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * Get currently logged in user. Requires a valid token for access.
   *
   * Args:
   * credentials (HTTPAuthorizationCredentials):
   * Bearer token provided via HTTP Authorization header.
   *
   * Returns:
   * User: Information about the authenticated user.
   * @returns UserDTO Successful Response
   * @throws ApiError
   */
  public static getUser(): CancelablePromise<GetUserApiV1AuthUserGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/auth/user',
    });
  }
}

export class ContactUsService {
  /**
   * Contact Us Send Message
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static contactUsSendMessage(
    data: ContactUsSendMessageApiV1ContactUsPostData
  ): CancelablePromise<ContactUsSendMessageApiV1ContactUsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/contact-us/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Validation Error',
        429: 'Too Many Requests',
        500: 'Internal Server Error',
      },
    });
  }
}

export class ContractionsService {
  /**
   * Start Contraction
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static startContraction(
    data: StartContractionApiV1LabourContractionStartPostData
  ): CancelablePromise<StartContractionApiV1LabourContractionStartPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/contraction/start',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * End Contraction
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static endContraction(
    data: EndContractionApiV1LabourContractionEndPutData
  ): CancelablePromise<EndContractionApiV1LabourContractionEndPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/labour/contraction/end',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Update Contraction
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static updateContraction(
    data: UpdateContractionApiV1LabourContractionUpdatePutData
  ): CancelablePromise<UpdateContractionApiV1LabourContractionUpdatePutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/labour/contraction/update',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Delete Contraction
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static deleteContraction(
    data: DeleteContractionApiV1LabourContractionDeleteDeleteData
  ): CancelablePromise<DeleteContractionApiV1LabourContractionDeleteDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/labour/contraction/delete',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class GeneralService {
  /**
   * Redirect To Docs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static redirectToDocsGet(): CancelablePromise<RedirectToDocsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/',
    });
  }

  /**
   * Docs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static docsDocsGet(): CancelablePromise<DocsDocsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/docs',
    });
  }

  /**
   * Openapi
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static openapiOpenapiJsonGet(): CancelablePromise<OpenapiOpenapiJsonGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/openapi.json',
    });
  }

  /**
   * Redoc
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static redocRedocGet(): CancelablePromise<RedocRedocGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/redoc',
    });
  }
}

export class HealthService {
  /**
   * Healthcheck
   * @returns string Successful Response
   * @throws ApiError
   */
  public static healthcheck(): CancelablePromise<HealthcheckApiV1HealthGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/health',
    });
  }
}

export class LabourService {
  /**
   * Update Labour Plan
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static updateLabourPlan(
    data: UpdateLabourPlanApiV1LabourPlanPutData
  ): CancelablePromise<UpdateLabourPlanApiV1LabourPlanPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/labour/plan',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Plan Labour
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static planLabour(
    data: PlanLabourApiV1LabourPlanPostData
  ): CancelablePromise<PlanLabourApiV1LabourPlanPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/plan',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Begin Labour
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static beginLabour(): CancelablePromise<BeginLabourApiV1LabourBeginPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/begin',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Complete Labour
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static completeLabour(
    data: CompleteLabourApiV1LabourCompletePutData
  ): CancelablePromise<CompleteLabourApiV1LabourCompletePutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/labour/complete',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Delete Labour
   * @param data The data for the request.
   * @param data.labourId
   * @returns unknown Successful Response
   * @returns void No Content
   * @throws ApiError
   */
  public static deleteLabour(
    data: DeleteLabourApiV1LabourDeleteLabourIdDeleteData
  ): CancelablePromise<DeleteLabourApiV1LabourDeleteLabourIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/labour/delete/{labour_id}',
      path: {
        labour_id: data.labourId,
      },
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Subscription Token
   * @returns LabourSubscriptionTokenResponse Successful Response
   * @throws ApiError
   */
  public static getSubscriptionToken(): CancelablePromise<GetSubscriptionTokenApiV1LabourSubscriptionTokenGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/subscription-token',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Send Invite
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static sendInvite(
    data: SendInviteApiV1LabourSendInvitePostData
  ): CancelablePromise<SendInviteApiV1LabourSendInvitePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/send_invite',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class LabourQueriesService {
  /**
   * Get All Labours
   * @returns LabourListResponse Successful Response
   * @throws ApiError
   */
  public static getAllLabours(): CancelablePromise<GetAllLaboursApiV1LabourGetAllGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/get-all',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Labour By Id
   * @param data The data for the request.
   * @param data.labourId
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static getLabourById(
    data: GetLabourByIdApiV1LabourGetLabourIdGetData
  ): CancelablePromise<GetLabourByIdApiV1LabourGetLabourIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/get/{labour_id}',
      path: {
        labour_id: data.labourId,
      },
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Active Labour
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static getActiveLabour(): CancelablePromise<GetActiveLabourApiV1LabourActiveGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/active',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Active Labour Summary
   * @returns LabourSummaryResponse Successful Response
   * @throws ApiError
   */
  public static getActiveLabourSummary(): CancelablePromise<GetActiveLabourSummaryApiV1LabourActiveSummaryGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/labour/active/summary',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }
}

export class LabourUpdatesService {
  /**
   * Post Labour Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static postLabourUpdate(
    data: PostLabourUpdateApiV1LabourLabourUpdatePostData
  ): CancelablePromise<PostLabourUpdateApiV1LabourLabourUpdatePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/labour/labour-update/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Delete Labour Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LabourResponse Successful Response
   * @throws ApiError
   */
  public static deleteLabourUpdate(
    data: DeleteLabourUpdateApiV1LabourLabourUpdateDeleteData
  ): CancelablePromise<DeleteLabourUpdateApiV1LabourLabourUpdateDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/labour/labour-update/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class PaymentsService {
  /**
   * Stripe Webhook
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static stripeWebhook(): CancelablePromise<StripeWebhookApiV1PaymentsWebhookPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/payments/webhook',
      errors: {
        400: 'Bad Request',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Create Checkout Session
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CheckoutResponse Successful Response
   * @throws ApiError
   */
  public static createCheckoutSession(
    data: CreateCheckoutSessionApiV1PaymentsCreateCheckoutSessionPostData
  ): CancelablePromise<CreateCheckoutSessionApiV1PaymentsCreateCheckoutSessionPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/payments/create-checkout-session',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class SubscriberService {
  /**
   * Send Invite
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static sendInvite(
    data: SendInviteApiV1SubscriberSendInvitePostData
  ): CancelablePromise<SendInviteApiV1SubscriberSendInvitePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/subscriber/send_invite',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class SubscriptionService {
  /**
   * Subscribe To
   * @param data The data for the request.
   * @param data.labourId
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static subscribeTo(
    data: SubscribeToApiV1SubscriptionSubscribeLabourIdPostData
  ): CancelablePromise<SubscribeToApiV1SubscriptionSubscribeLabourIdPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/subscription/subscribe/{labour_id}',
      path: {
        labour_id: data.labourId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Unsubscribe From
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static unsubscribeFrom(
    data: UnsubscribeFromApiV1SubscriptionUnsubscribePostData
  ): CancelablePromise<UnsubscribeFromApiV1SubscriptionUnsubscribePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/subscription/unsubscribe',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Subscriptions
   * @returns SubscriptionsResponse Successful Response
   * @throws ApiError
   */
  public static getSubscriptions(): CancelablePromise<GetSubscriptionsApiV1SubscriptionSubscriptionsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/subscription/subscriptions',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Subscriber Subscriptions
   * @returns SubscriberSubscriptionsResponse Successful Response
   * @throws ApiError
   */
  public static getSubscriberSubscriptions(): CancelablePromise<GetSubscriberSubscriptionsApiV1SubscriptionSubscriberSubscriptionsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/subscription/subscriber_subscriptions',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Subscription By Id
   * @param data The data for the request.
   * @param data.subscriptionId
   * @returns SubscriptionDataResponse Successful Response
   * @throws ApiError
   */
  public static getSubscriptionById(
    data: GetSubscriptionByIdApiV1SubscriptionSubscriptionDataSubscriptionIdGetData
  ): CancelablePromise<GetSubscriptionByIdApiV1SubscriptionSubscriptionDataSubscriptionIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/subscription/subscription-data/{subscription_id}',
      path: {
        subscription_id: data.subscriptionId,
      },
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get Labour Subscriptions
   * @param data The data for the request.
   * @param data.labourId
   * @returns LabourSubscriptionsResponse Successful Response
   * @throws ApiError
   */
  public static getLabourSubscriptions(
    data: GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetData
  ): CancelablePromise<GetLabourSubscriptionsApiV1SubscriptionLabourSubscriptionsLabourIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/subscription/labour_subscriptions/{labour_id}',
      path: {
        labour_id: data.labourId,
      },
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class SubscriptionManagementService {
  /**
   * Approve Subscriber
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static approveSubscriber(
    data: ApproveSubscriberApiV1SubscriptionManagementApproveSubscriberPutData
  ): CancelablePromise<ApproveSubscriberApiV1SubscriptionManagementApproveSubscriberPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/approve-subscriber',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Remove Subscriber
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static removeSubscriber(
    data: RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutData
  ): CancelablePromise<RemoveSubscriberApiV1SubscriptionManagementRemoveSubscriberPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/remove-subscriber',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Block Subscriber
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static blockSubscriber(
    data: BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutData
  ): CancelablePromise<BlockSubscriberApiV1SubscriptionManagementBlockSubscriberPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/block-subscriber',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Unblock Subscriber
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static unblockSubscriber(
    data: UnblockSubscriberApiV1SubscriptionManagementUnblockSubscriberPutData
  ): CancelablePromise<UnblockSubscriberApiV1SubscriptionManagementUnblockSubscriberPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/unblock-subscriber',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Update Role
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static updateRole(
    data: UpdateRoleApiV1SubscriptionManagementUpdateRolePutData
  ): CancelablePromise<UpdateRoleApiV1SubscriptionManagementUpdateRolePutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/update-role',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Update Contact Methods
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionResponse Successful Response
   * @throws ApiError
   */
  public static updateContactMethods(
    data: UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutData
  ): CancelablePromise<UpdateContactMethodsApiV1SubscriptionManagementUpdateContactMethodsPutResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/api/v1/subscription-management/update-contact-methods',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        422: 'Validation Error',
        500: 'Internal Server Error',
      },
    });
  }
}

export class UserService {
  /**
   * Get User
   * @returns UserResponse Successful Response
   * @throws ApiError
   */
  public static getUser(): CancelablePromise<GetUserApiV1UserGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/user/',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }

  /**
   * Get User Summary
   * @returns UserSummaryResponse Successful Response
   * @throws ApiError
   */
  public static getUserSummary(): CancelablePromise<GetUserSummaryApiV1UserSummaryGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/user/summary',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        500: 'Internal Server Error',
      },
    });
  }
}
